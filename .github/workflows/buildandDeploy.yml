# This is a basic workflow to help you get started with Actions

name: buildandDeploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ staging ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        apt-get update && apt-get install -y python-dev
        python -m pip install --upgrade pip
        pip install pytest pyyaml
    - name: Test with pytest
      run: |
        pytest

    - name: Login to Artifactory
      uses: docker/login-action@v1 
      with:
        registry: artifactory.internal.sysdig.com
        username: david.lorite@sysdig.com
        password: ${{ secrets.ARTI_TOKEN }}

    - name: Check rules
      run: | 
        ./tools/checkrules.sh

    - name: build and push docker image
      uses: docker/build-push-action@v1
      with:
        username: _json_key
        password: ${{ secrets.GRC_REGISTRY_SECRET }}
        registry: gcr.io
        repository: mateo-burillo-ns/promcat-resources
        tags: staging

    - name: Install dependencies for kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Deploy in staging
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      run: |
        echo "$GOOGLE_APPLICATION_CREDENTIALS" | base64 --decode > /tmp/config
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/config
        export KUBECONFIG=deployment/promhub_kubeconfig
        chmod +x deployment/staging/deploy.sh
        sh ./deployment/staging/deploy.sh